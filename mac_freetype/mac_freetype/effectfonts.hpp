//
//  effectfonts.hpp
//  mac_freetype
//
//  Created by Liu,Han(ARL) on 2017/9/27.
//  Copyright © 2017年 Liu,Han(ARL). All rights reserved.
//

#ifndef effectfonts_hpp
#define effectfonts_hpp


#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_STROKER_H
#include "config.h"
#include <vector>
#include <map>

class CEffectFonts{
public:
    CEffectFonts();
    ~CEffectFonts();
public:
    void init(const char* fftpath, 
        int size,
        const Pixel32 &fontcol,
        const Pixel32 &outlinecol,
        float outlinewidth);
protected:
  void release();

public:
  void load_glyph_tga(std::wstring wstr);
  bool get_wordpixel(wchar_t, WordPixel &);
  int get_wordpixel_list(std::wstring, std::vector<WordPixel>&);
  
protected:
    struct Rect
    {
        Rect() { }
        Rect(float left, float top, float right, float bottom)
        : xmin(left), xmax(right), ymin(top), ymax(bottom) { }
        
        void Include(const Vec2 &r)
        {
            xmin = MIN(xmin, r.x);
            ymin = MIN(ymin, r.y);
            xmax = MAX(xmax, r.x);
            ymax = MAX(ymax, r.y);
        }
        
        float Width() const { return xmax - xmin + 1; }
        float Height() const { return ymax - ymin + 1; }
        float xmin, xmax, ymin, ymax;
    };
    
    
    // A horizontal pixel span generated by the FreeType renderer.
    struct Span
    {
        Span(){}
        Span(int _x, int _y, int _width, int _coverage)
        : x(_x), y(_y), width(_width), coverage(_coverage){}
        
        int x, y, width, coverage;
    };
    typedef std::vector<Span> Spans;
    
private:
    void insert_word(wchar_t ch);
    void render_spans(FT_Library &library,
                      FT_Outline * const outline,
                      Spans *spans);
    static void raster_callback(const int y,
                                const int count,
                                const FT_Span * const spans,
                                void * const user);
private:
    unsigned char* _fontBuffer = nullptr;
    FT_Library _library;
    FT_Face _face;
    int _size;
    Pixel32 _font_col;
    Pixel32 _outline_col;
    float _outlinewidth;
    typedef std::pair<wchar_t, WordPixel> PAIR_WORD;
    typedef std::map<wchar_t, WordPixel> MAP_WORDS;
    MAP_WORDS _map_words;
};
#endif /* effectfonts_hpp */
